buildscript {
  // Load in our list of dependencies.
  //
  apply from: file("$rootDir/libraries.gradle")

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:4.1.1'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${versions.androidx_navigation}"
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.2.0"
    classpath "com.nabilhachicha:android-native-dependencies:0.1.2"
    classpath 'com.google.gms:google-services:4.3.4'
    classpath 'com.google.firebase:firebase-crashlytics-gradle:2.4.1'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.27.0"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  // Required for some dependencies only available from our private nexus
  //
  nyplNexusDepend =
    project.hasProperty('org.librarysimplified.nexus.depend')
  nyplNexusUsername =
    project.findProperty('org.librarysimplified.nexus.username') ?: ''
  nyplNexusPassword =
    project.findProperty('org.librarysimplified.nexus.password') ?: ''

  if (nyplNexusDepend && !nyplNexusUsername) {
    throw new GradleException(
      'org.librarysimplified.nexus.depend is set but org.librarysimplified.nexus.username is undefined!')
  }
  if (nyplNexusDepend && !nyplNexusPassword) {
    throw new GradleException(
      'org.librarysimplified.nexus.depend is set but org.librarysimplified.nexus.password is undefined!')
  }
}

subprojects { project ->
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]

  switch (POM_PACKAGING) {
    case "aar":
      apply from: file("$rootDir/build_aar.gradle")
      break
    case "apk":
      apply from: file("$rootDir/build_apk.gradle")
      break
    case "jar":
      apply from: file("$rootDir/build_jar.gradle")
      break
    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  repositories {
    mavenLocal()
    mavenCentral()
    google()

    if (nyplNexusDepend) {
      maven {
        credentials {
          username nyplNexusUsername
          password nyplNexusPassword
        }
        url 'https://nexus.librarysimplified.org:8443/nexus/content/groups/external/'
      }
    }

    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "http://maven.findawayworld.com/artifactory/libs-release/" }
    maven { url "https://jitpack.io" }
    jcenter()
  }

  // Configure publishing for java projects
  //
  pluginManager.withPlugin("java") {
    logger.info("Configuring publishing for ${project} (${POM_PACKAGING})")
    apply from: file("$rootDir/.publishing/publishing.gradle")
  }

  // Configure publishing for android-library projects
  //
  pluginManager.withPlugin("com.android.library") {
    logger.info("Configuring publishing for ${project} (${POM_PACKAGING})")
    apply from: file("$rootDir/.publishing/publishing.gradle")
  }

  // We currently have transitive dependencies that specify dependencies on newer versions
  // of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
  // new versions appear of both artifacts. Remove this when both are updated!
  //
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }
}

/**
 * An empty task called by CI. We don't do semantic versioning analysis here yet.
 */
task verifySemanticVersioning {}

/**
 * Displays properties starting with 'org.librarysimplified'.
 */
task listProperties(group: 'NYPL') {
  description = "Displays properties starting with 'org.librarysimplified'."
  doLast {
    project.properties
      .findAll { p ->
        p.key.startsWith('org.librarysimplified')
      }
      .sort()
      .each { println(it) }
  }
}

// Add ktlint tasks to root project. This executes faster than
// configuring the task for each individual subproject.
//
apply from: file("$rootDir/ktlint.gradle")

/**
 * Translate a semantic version into a numeric version code.
 */
@SuppressWarnings('unused')
static Integer versionCode(String versionName) {
  def (major, minor, patch) = versionName
    .replaceAll('[-+].*', '') // strip all metadata from version
    .tokenize('.')

  major = major.toInteger()
  minor = minor.toInteger()
  patch = patch.toInteger()

  // Return version code padded with leading zeros
  return String.format('%02d%02d%02d', major, minor, patch).toInteger()
}

/**
 * Expand the 'tilde' character to user.home.
 */
@SuppressWarnings('unused')
static String expandUserHome(String path) {
  if (path == null) return
  return path.replaceFirst("~", System.getProperty("user.home"))
}
