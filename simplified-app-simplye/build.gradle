android {
  defaultConfig {
    versionName = project.version
    versionCode = versionCode(project.version)
    setProperty("archivesBaseName", "simplye-${versionName}")
  }

  packagingOptions {
    doNotStrip 'lib/**/*.so'

    // Readium and the PDF reader both provide this shared library. This causes
    // the build to fail with an error because Gradle doesn't know which to pick.
    pickFirst 'lib/x86/libc++_shared.so'
    pickFirst 'lib/arm64-v8a/libc++_shared.so'
    pickFirst 'lib/armeabi-v7a/libc++_shared.so'
  }

  signingConfigs {
    release {
      keyAlias nyplSigningKeyAlias
      keyPassword nyplSigningKeyPassword
      storeFile file("$rootDir/release.jks")
      storePassword nyplSigningStorePassword
    }
  }

  buildTypes {
    debug {
      ndk { abiFilters 'x86', 'arm64-v8a', 'armeabi-v7a' }
      versionNameSuffix '-debug'
    }
    release {
      ndk { abiFilters 'arm64-v8a', 'armeabi-v7a' }
      signingConfig signingConfigs.release
    }
  }

  lintOptions {
    checkReleaseBuilds false
  }
}

dependencies {
  implementation project(":simplified-main")
  implementation project(":simplified-accounts-source-nyplregistry")
  implementation project(":simplified-analytics-circulation")
  implementation project(":simplified-crashlytics")
  implementation project(":simplified-migration-from3master")
  implementation libraries.firebase_analytics
  implementation libraries.firebase_crashlytics
  implementation libraries.nypl_drm_core
  implementation libraries.nypl_findaway
  implementation libraries.nypl_overdrive

  if (project.hasProperty("org.librarysimplified.nexus.depend")) {
    implementation libraries.nypl_drm_adobe
  }
  annotationProcessor libraries.google_autovalue_processor
}

task preFlightChecks {
  def requiredFiles = [:]
  requiredFiles["$rootDir/release.jks"] =
    "ce7c883508ff259682fbdb5eb462e7bf43937d42c7fcc6aa73eb9120d56d48b7"
  requiredFiles["$projectDir/google-services.json"] =
    "98cf50e0ed5fea9e371990d58b0bbbdb797dc8189d7ca52e7b89a48e82ac96e3"
  requiredFiles["$projectDir/src/main/assets/ReaderClientCert.sig"] =
    "280838a4cb5c2ca4a2c8cf14e93f8ff72dbc6046cf188b5e83cf830f5159ce1e"
  requiredFiles["$projectDir/src/main/assets/secrets.conf"] =
    "dde8800740b5c776df043b48a66be2952d4c6954d58f31ec42afcebba66383ca"

  doLast {
    logger.info("running pre-flight checks")

    def missingFiles = []
    for (entry in requiredFiles) {
      logger.info("Checking ${entry.key} exists and has expected digest value")

      try {
        def received = sha256Of(file(entry.key))
        def expected = entry.value
        if (received != expected) {
          logger.error("ERROR: File ${entry.key} has incorrect SHA-256 hash")
          logger.error("  Expected: ${expected}")
          logger.error("  Received: ${received}")
          missingFiles.add(entry.key)
        }
      } catch (Exception e) {
        logger.error("ERROR: File not found ${entry.key}: ${e.getClass()}: ${e.getMessage()}")
        missingFiles.add(entry.key)
      }
    }

    if (!missingFiles.isEmpty()) {
      throw new FileNotFoundException("One or more required files are missing or have incorrect contents.")
    }
  }
}
