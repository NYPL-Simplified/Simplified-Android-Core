apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def versionValues() {
  def propsFile = file('version.properties')
  def Properties props = new Properties()
  def name
  def code
  if (propsFile.canRead()) {
    props.load(new FileInputStream(propsFile))
    name = props['versionName']
    code = props['versionCode'].toInteger()
  } else {
    throw new FileNotFoundException("Could not read version.properties!")
  }

  props['versionCode'] = (code + 1).toString()
  props.save(new FileOutputStream(propsFile), "")

  logger.info("incrementing build version ${code} -> ${code + 1}")
  return new Tuple(name, code)
}

android {
  compileSdkVersion 28
  buildToolsVersion "28.0.3"

  def version = versionValues()

  packagingOptions {
    exclude 'META-INF/LICENSE'
  }

  signingConfigs {
    release {
      keyAlias findProperty("org.librarysimplified.simplye.keyAlias")
      keyPassword findProperty("org.librarysimplified.simplye.keyPassword")
      storeFile file("keystore.jks")
      storePassword findProperty("org.librarysimplified.simplye.storePassword")
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
    }
  }

  defaultConfig {
    multiDexEnabled true
    versionName = version.get(0)
    versionCode = version.get(1)
    setProperty("archivesBaseName", "simplye-${versionName}-${versionCode}")
    minSdkVersion androidMinimumSDK
  }

  lintOptions {
    checkReleaseBuilds false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

description = 'simplified-app-simplye'

dependencies {
  implementation project(":simplified-accounts-source-nyplregistry")
  implementation project(':simplified-analytics-circulation')
  implementation project(':simplified-app-shared')
  implementation project(':simplified-migration-from3master')

  /*
   * If building with Adobe DRM, add the required native dependencies.
   */

  if (project.hasProperty("org.librarysimplified.with_drm_adobe")) {
    if (project.property("org.librarysimplified.with_drm_adobe") == "true") {
      implementation group: 'org.nypl.drm', name: 'nypl-drm-adobe-provider', version: '1.0.0'
      implementation group: 'org.nypl.drm', name: 'libnypl_adobe', version: '1.0.0'
      implementation group: 'org.nypl.drm', name: 'libnypl_adobe_filter', version: '1.0.0'
    }
  }

  implementation "com.android.support:support-v4:28.0.0"
  implementation 'com.android.support:support-v4:28.0.0'
}

/*
 * If building with various optional features, check that the files exist.
 */

preBuild.doFirst {
  def adobeDRMRequested =
    (project.hasProperty("org.librarysimplified.with_drm_adobe")
      && project.property("org.librarysimplified.with_drm_adobe") == "true")

  if (adobeDRMRequested) {
    if (!file("${project.rootDir}/simplified-app-simplye/src/main/assets/ReaderClientCert.sig").exists()) {
      throw new IllegalStateException("""
You are attempting to build with Adobe DRM but have not added the required
certificate file at ${project.rootDir}/simplified-app-simplye/src/main/assets/ReaderClientCert.sig
""")
    }
  } else {
    if (file("${project.rootDir}/simplified-app-simplye/src/main/assets/ReaderClientCert.sig").exists()) {
      throw new IllegalStateException("""
You are attempting to build without Adobe DRM but have accidentally left the
certificate file at ${project.rootDir}/simplified-app-simplye/src/main/assets/ReaderClientCert.sig.
Remove this file!
""")
    }
  }

  def bugsnagRequested =
    (project.hasProperty("org.librarysimplified.with_bugsnag")
      && project.property("org.librarysimplified.with_bugsnag") == "true")

  if (bugsnagRequested) {
    if (!file("${project.rootDir}/simplified-app-simplye/src/main/assets/bugsnag.conf").exists()) {
      throw new IllegalStateException("""
You are attempting to build with Bugsnag but have not added the required
configuration file at ${project.rootDir}/simplified-app-simplye/src/main/assets/bugsnag.conf
""")
    }
  } else {
    if (file("${project.rootDir}/simplified-app-simplye/src/main/assets/bugsnag.conf").exists()) {
      throw new IllegalStateException("""
You are attempting to build without Bugsnag but have accidentally left the
configuration file at ${project.rootDir}/simplified-app-simplye/src/main/assets/bugsnag.conf.
Remove this file!
""")
    }
  }
}

/*
 * If building with Adobe DRM, add and process the required native dependencies.
 */

if (project.hasProperty("org.librarysimplified.with_drm_adobe")) {
  if (project.property("org.librarysimplified.with_drm_adobe") == "true") {
    apply plugin: 'android-native-dependencies'

    native_dependencies {
      artifact (group: 'org.nypl.drm', name: 'libnypl_adobe', version: '1.0.0', classifier: 'armeabi-v7a') {
        addLibPrefixToArtifact=false
      }

      artifact (group: 'org.nypl.drm', name: 'libnypl_adobe_filter', version: '1.0.0', classifier: 'armeabi-v7a') {
        addLibPrefixToArtifact=false
      }
    }
  }
}
