def versionValues() {
  def propsFile = file("version.properties")
  def Properties props = new Properties()
  def name
  def code
  if (propsFile.canRead()) {
    props.load(new FileInputStream(propsFile))
    name = props["versionName"]
    code = props["versionCode"].toInteger()
  } else {
    throw new FileNotFoundException("Could not read version.properties!")
  }

  props["versionCode"] = (code + 1).toString()
  props.save(new FileOutputStream(propsFile), "")

  logger.info("incrementing build version ${code} -> ${code + 1}")
  return new Tuple(name, code)
}

android {
  def version = versionValues()

  packagingOptions {
    exclude "META-INF/LICENSE"

    // The PDF library and Readium both provide this shared library. This will
    // cause the build to fail because Gradle doesn"t know which one to pick.
    pickFirst "lib/arm64-v8a/libc++_shared.so"
    pickFirst "lib/armeabi-v7a/libc++_shared.so"
    pickFirst "lib/x86/libc++_shared.so"
  }

  signingConfigs {
    release {
      keyAlias findProperty("org.librarysimplified.simplye.keyAlias")
      keyPassword findProperty("org.librarysimplified.simplye.keyPassword")
      storeFile file("keystore.jks")
      storePassword findProperty("org.librarysimplified.simplye.storePassword")
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
    }
  }

  defaultConfig {
    multiDexEnabled true
    versionName = version.get(0)
    versionCode = version.get(1)
    setProperty("archivesBaseName", "simplye-${versionName}-${versionCode}")
  }

  lintOptions {
    checkReleaseBuilds false
  }
}

dependencies {
  implementation project(":simplified-accounts-source-nyplregistry")
  implementation project(":simplified-analytics-circulation")
  implementation project(":simplified-app-shared")
  implementation project(":simplified-migration-from3master")

  /*
   * If building with Adobe DRM, add the required native dependencies.
   */

  if (project.hasProperty("org.librarysimplified.with_drm_adobe")) {
    if (project.property("org.librarysimplified.with_drm_adobe") == "true") {
      implementation "org.nypl.drm:libnypl_adobe:1.0.0"
      implementation "org.nypl.drm:libnypl_adobe_filter:1.0.0"
      implementation "org.nypl.drm:nypl-drm-adobe-provider:1.0.0"
    }
  }

  implementation libraries.androidXLegacySupport
  implementation libraries.androidXLegacySupport
}

/*
 * If building with various optional features, check that the files exist.
 */

preBuild.doFirst {
  def adobeDRMRequested =
    (project.hasProperty("org.librarysimplified.with_drm_adobe")
      && project.property("org.librarysimplified.with_drm_adobe") == "true")

  if (adobeDRMRequested) {
    if (!file("${project.rootDir}/simplified-app-simplye/src/main/assets/ReaderClientCert.sig").exists()) {
      throw new IllegalStateException("""
You are attempting to build with Adobe DRM but have not added the required
certificate file at ${project.rootDir}/simplified-app-simplye/src/main/assets/ReaderClientCert.sig

If you do not want to use Adobe DRM, define the following in ${project.rootDir}/gradle.properties:

org.librarysimplified.with_drm_adobe = false
""")
    }
  } else {
    if (file("${project.rootDir}/simplified-app-simplye/src/main/assets/ReaderClientCert.sig").exists()) {
      throw new IllegalStateException("""
You are attempting to build without Adobe DRM but have accidentally left the
certificate file at ${project.rootDir}/simplified-app-simplye/src/main/assets/ReaderClientCert.sig.
Remove this file!

If you *do* want to use Adobe DRM, define the following in ${project.rootDir}/gradle.properties:

org.librarysimplified.with_drm_adobe = true
""")
    }
  }

  def bugsnagRequested =
    (project.hasProperty("org.librarysimplified.with_bugsnag")
      && project.property("org.librarysimplified.with_bugsnag") == "true")

  if (bugsnagRequested) {
    if (!file("${project.rootDir}/simplified-app-simplye/src/main/assets/bugsnag.conf").exists()) {
      throw new IllegalStateException("""
You are attempting to build with Bugsnag but have not added the required
configuration file at ${project.rootDir}/simplified-app-simplye/src/main/assets/bugsnag.conf

If you do not want to use Bugsnag, define the following in ${project.rootDir}/gradle.properties:

org.librarysimplified.with_bugsnag = false
""")
    }
  } else {
    if (file("${project.rootDir}/simplified-app-simplye/src/main/assets/bugsnag.conf").exists()) {
      throw new IllegalStateException("""
You are attempting to build without Bugsnag but have accidentally left the
configuration file at ${project.rootDir}/simplified-app-simplye/src/main/assets/bugsnag.conf.
Remove this file!

If you *do* want to use Bugsnag, define the following in ${project.rootDir}/gradle.properties:

org.librarysimplified.with_bugsnag = true
""")
    }
  }
}

/*
 * If building with Adobe DRM, add and process the required native dependencies.
 */

if (project.hasProperty("org.librarysimplified.with_drm_adobe")) {
  if (project.property("org.librarysimplified.with_drm_adobe") == "true") {
    apply plugin: "android-native-dependencies"

    native_dependencies {
      artifact(group: "org.nypl.drm", name: "libnypl_adobe", version: "1.0.0", classifier: "armeabi-v7a") {
        addLibPrefixToArtifact = false
      }

      artifact(group: "org.nypl.drm", name: "libnypl_adobe_filter", version: "1.0.0", classifier: "armeabi-v7a") {
        addLibPrefixToArtifact = false
      }
    }
  }
}
