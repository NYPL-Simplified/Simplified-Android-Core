def versionValues() {
  def props = new Properties()
  file("version.properties").withInputStream { props.load(it) }

  // Load properties
  def versionName = props.getProperty("versionName")
  def versionCode = props.getProperty("versionCode").toInteger()

  // Increment version using the build number, if on Travis CI
  def buildNumber = (System.getenv('TRAVIS_BUILD_NUMBER') ?: "0").toInteger()
  if (buildNumber > 0) {
    logger.info("Incrementing version code: $versionCode + $buildNumber = ${versionCode + buildNumber}")
    versionCode += buildNumber
  }
  return new Tuple(versionName, versionCode)
}

android {
  def version = versionValues()

  defaultConfig {
    versionName = version.get(0)
    versionCode = version.get(1)
    setProperty("archivesBaseName", "${versionName}-${versionCode}")
  }

  signingConfigs {
    release {
      keyAlias findProperty("org.librarysimplified.keyAlias")
      keyPassword findProperty("org.librarysimplified.keyPassword")
      storeFile file("keystore.jks")
      storePassword findProperty("org.librarysimplified.storePassword")
    }
  }

  buildTypes {
    debug {
      versionNameSuffix '-debug'
    }
    release {
      signingConfig signingConfigs.release
    }
  }

  flavorDimensions 'mode'

  productFlavors {
    vanilla {
      dimension 'mode'
    }
    vanillaWithProfiles {
      dimension 'mode'
      applicationIdSuffix ".with_profiles"
    }
  }

  packagingOptions {
    exclude "META-INF/LICENSE"

    // The PDF library and Readium both provide this shared library. This will
    // cause the build to fail because Gradle doesn't know which one to pick.
    pickFirst "lib/arm64-v8a/libc++_shared.so"
    pickFirst "lib/armeabi-v7a/libc++_shared.so"
    pickFirst "lib/x86/libc++_shared.so"
  }
}

dependencies {
  implementation project(":simplified-main")
  implementation project(":simplified-accounts-source-nyplregistry")
  annotationProcessor libraries.autoValueProcessor

  vanillaWithProfilesImplementation project(":simplified-accounts-source-filebased")
}